version: '3'
services:
  backstage:
    container_name: backstage
    image: backstage
    environment:
      POSTGRES_HOST: db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres-pass
      # Add your token here
      GITHUB_TOKEN: <INSERT_GITHUB_TOKEN>
      SPOTIFY_PLUGIN_LICENSE: <INSERT_LICENSE_KEY>
      SONARQUBE_HOST: sonarqube
      SONARQUBE_PORT: 9000
      SONARQUBE_ADMIN_USERNAME: admin
      SONARQUBE_ADMIN_PASSWORD: admin123
    ports:
      - '7007:7007'
    volumes:
      - ./soundcheck:/app/soundcheck
      - ./examples/:/app/examples
      - ./conf/backstage/bootstrap.js:/bootstrap.js
    command: sh -c " node /bootstrap.js && node packages/backend --config app-config.yaml"
    networks:
      - bridged
    depends_on:
      db:
        condition: service_healthy
      sonarqube:
        condition: service_healthy

  sonarqube:
    container_name: sonarqube
    image: sonarqube:9-community
    environment:
      SONAR_JDBC_URL: 'jdbc:postgresql://postgres:5432/sonar'
      SONAR_JDBC_USERNAME: 'postgres'
      SONAR_JDBC_PASSWORD: 'postgres-pass'
    volumes:
      - ./volumes/sonarqube/data:/opt/SonarQube/data
      - ./volumes/sonarqube/extensions:/opt/SonarQube/extensions
      - ./volumes/sonarqube/logs:/opt/SonarQube/logs
    healthcheck:
      test:
        [
          'CMD-SHELL',
          'wget -qO- http://localhost:9000/api/system/status | grep -e ''"status":"UP"'' -e ''"status":"DB_MIGRATION_NEEDED"'' -e ''"status":"DB_MIGRATION_RUNNING"''',
        ]
      start_period: 10s
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bridged
    expose:
      - 9000
    ports:
      - '9000:9000'
    depends_on:
      db:
        condition: service_healthy

  db:
    container_name: postgres
    image: postgres
    restart: always
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'postgres-pass'
    volumes:
      - './volumes/postgres:/var/lib/postgresql/data/'
      - './conf/postgres:/docker-entrypoint-initdb.d/'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $$POSTGRES_USER']
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - bridged
    ports:
      - '5432:5432'

networks:
  bridged:
    driver: bridge
